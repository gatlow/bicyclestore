const User = require("../models/User");
const speakeasy = require("speakeasy");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const qrcode = require("qrcode");

// –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
exports.toggleTwoFactor = async (req, res) => {
    const userId = req.user.id; // –¢–µ–ø–µ—Ä—å req.user –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω

    try {
        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        user.isTwoFactorEnabled = !user.isTwoFactorEnabled;
        await user.save();

        res.status(200).json({ message: `–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è ${user.isTwoFactorEnabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}` });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏" });
    }
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–∞ –∏ QR-–∫–æ–¥–∞ –¥–ª—è 2FA
exports.generate2FASecret = async (req, res) => {
    const userId = req.user.id;

    try {
        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–∞
        const secret = speakeasy.generateSecret({ name: "bicycle store" });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user.twoFactorSecret = secret.base32;
        await user.save();

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
        qrcode.toDataURL(secret.otpauth_url, (err, data_url) => {
            if (err) {
                return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞" });
            }

            res.json({ secret: secret.base32, qrCode: data_url });
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–∞ 2FA:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–∞ 2FA" });
    }
};

// –í–∫–ª—é—á–µ–Ω–∏–µ 2FA –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞
exports.enable2FA = async (req, res) => {
    const { userId, token } = req.body;

    try {
        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
        const verified = speakeasy.totp.verify({
            secret: user.twoFactorSecret,
            encoding: "base32",
            token: token,
        });

        if (!verified) {
            return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥" });
        }

        // –í–∫–ª—é—á–µ–Ω–∏–µ 2FA
        user.isTwoFactorEnabled = true;
        await user.save();

        res.json({ message: "–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞" });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è 2FA:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è 2FA" });
    }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ 2FA –ø—Ä–∏ –≤—Ö–æ–¥–µ
exports.verify2FA = async (req, res) => {
    const { userId, token } = req.body;

    try {
        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
        const verified = speakeasy.totp.verify({
            secret: user.twoFactorSecret,
            encoding: "base32",
            token: token,
        });

        if (!verified) {
            return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥" });
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
        const accessToken = jwt.sign({ id: user._id, role: user.role }, process.env.JWT_SECRET, { expiresIn: "1h" });

        res.json({ token: accessToken });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ 2FA:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ 2FA" });
    }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.updateUser = async (req, res) => {
    const { userId, name, email, status } = req.body;

    try {
        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        user.name = name || user.name;
        user.email = email || user.email;
        user.role = status || user.role;
        await user.save();

        res.status(200).json({ message: "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã" });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.register = async (req, res) => {
    console.log("Request body:", req.body);
    try {
        const { name, email, password } = req.body;
        if (!name || !email || !password) {
            return res.status(400).json({ error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
        }

        const user = new User({ name, email, password, twoFactorSecret: null });

        await user.save();

        res.status(201).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" });
    }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.deleteUser = async (req, res) => {
    const { userId } = req.body;

    try {
        const user = await User.findByIdAndDelete(userId);
        if (!user) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.status(200).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω" });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }
};

// –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
exports.login = async (req, res) => {
    const { email, password } = req.body;
    console.log("üì© Received login request:", req.body);

    try {
        const user = await User.findOne({ email });
        if (!user) {
            console.log("‚ùå User not found");
            return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        console.log("‚úÖ Found user:", user.email);
        console.log("üîí Stored password (hashed):", user.password);
        console.log("üîë Entered password:", password);

        const isMatch = await bcrypt.compare(password, user.password);
        console.log("üîç Password match result:", isMatch);

        if (!isMatch) {
            console.log("‚ùå Password does not match");
            return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
        }

        if (user.isTwoFactorEnabled) {
            return res.json({ userId: user._id, requires2FA: true });
        }

        const token = jwt.sign({ id: user._id, role: user.role, twoFactorEnabled: user.isTwoFactorEnabled }, process.env.JWT_SECRET, { expiresIn: "1h" });

        console.log("‚úÖ Login successful! Token generated.");
        res.json({ token });

    } catch (error) {
        console.error("‚ùå Login failed:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞", error: error.message });
    }
};